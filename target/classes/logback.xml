<?xml version="1.0" encoding="UTF-8"?>
<!--
 [Layout]
 %m : 로그내용이 출력
 %p : trace > debug > info > warn > error 등의 priority 출력
 %r : 어플리케이션이 시작되어 로깅이벤트가 발생하는 시점까지의 경과시간을 밀리세컨드로 출력
 %c : 예) 카테고리가 a.b.c 처럼 되어있다면 %c{2}는 b.c가 출력됩니다.
 %n :  플랫폼 종속적인 개행문자가 출력된다. \r\n 또는 \n 일것이다
 %d : 로깅이벤트가 일어나 날짜 출력 ( 프로그램의 실행속도를 느리게 한다.)
     예) %d{HH:mm:ss} 또는 %d{dd MMMM yyyy HH:mm:ss}
 %C : 호출자의 클래스명 출력
    예) 클래스구조가 org.apache.xyz.SomeClass 처럼 되어있다면 %C{2}는 xyz.SomeClass 가 출력됩니다
 %M : 로깅이 발생한 method 이름을 나타냅니다.
 %F : 로깅이 발생한 프로그램 파일명을 나타냅니다.
 %l : 로깅이 발생한 caller의 정보를 나타냅니다 
 %L : 로깅이 발생한 caller의 라인수를 나타냅니다 
 %x : 로깅이 발생한 thread와 관련된 NDC(nested diagnostic context)를 출력합니다. 
 %X : 로깅이 발생한 thread와 관련된 MDC(mapped diagnostic context)를 출력합니다. 
 %% : % 표시를 출력하기 위해 사용한다.  
 %t : 로그이벤트가 발생된 쓰레드의 이름을 출력합니다
-->

<configuration scan="true" scanPriod="30 seconds">
	
	<appender name="SAMPLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
			<layout class="ch.qos.logback.classic.PatternLayout">
		        <Pattern>%d{HH:mm:ss.SSS} [%-5p] [%t] [%c{36}] - %m%n</Pattern>
			</layout>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

	<!-- RULES for logging : TRACE < DEBUG < INFO < WARN < ERROR < FATAL -->
    <logger name="org.springframework" level="INFO" additivity="false"><appender-ref ref="SAMPLE"/></logger>
    <logger name="egovframework" level="DEBUG" additivity="false"><appender-ref ref="SAMPLE"/></logger>
	<logger name="java.sql" level="ERROR" additivity="false"><appender-ref ref="SAMPLE"/></logger>
	
	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqlonly" level="WARN" additivity="false"><appender-ref ref="SAMPLE"/></logger>
	
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.sqltiming" level="DEBUG" additivity="false"><appender-ref ref="SAMPLE"/></logger>
	
	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->    
	<logger name="jdbc.audit" level="ERROR" additivity="false"><appender-ref ref="SAMPLE"/></logger>
	
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	<logger name="jdbc.resultset" level="ERROR" additivity="false"><appender-ref ref="SAMPLE"/></logger> 
    
    <root level="INFO">
        <appender-ref ref="SAMPLE"/> <!-- Console에 로그를 출력하고자 할 때 사용 -->
    </root>
</configuration>



































